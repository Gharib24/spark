#!/usr/bin/env python
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GObject

from spark.sparkothers.debian_installer_preseed_questions import preseed_questions_identifier


class Handler():
	def __init__(self):
		super().__init__()

		for one_dict in preseed_questions_identifier:
				one_dict['answer'] = None

	def set_answer_question(self, question, answer):
#		self.log.info(question, answer)
		identifier = False
		if answer == 'delete':
			answer = None
		for one_dict in preseed_questions_identifier:
			if one_dict['question'] == question:
				one_dict['answer'] = answer
#				print(one_dict['answer'])
				identifier = True
				break
		if not identifier:
			self.log.warn(f"{question} does not identifier to Debian installer")

	def get_answer_question(self, question):
		answer = None
		for one_dict in preseed_questions_identifier:
			if one_dict['question'] == question:
				answer = one_dict.get('answer')
		return answer

	def save_preseed_file(self):
		with open(self.settings.PRESEED_FILE, 'w') as w:
			w.write(f"# generated by spark *\n\n# https://www.debian.org/releases/stable/amd64/apb.en.html\n# https://www.debian.org/releases/stable/example-preseed.txt\n\n")
			w.close()
		with open(self.settings.PRESEED_FILE , 'a') as a:
			for one_dict in preseed_questions_identifier:
				if one_dict.get('answer') != None:
					if one_dict.get('comment') != '':
						line = f"\n### {one_dict.get('comment')}\n"
						a.write(line)
					line = f"{one_dict.get('owner')} {one_dict.get('question')} {one_dict.get('type')} {one_dict.get('answer')}\n"
					a.write(line)
			a.close()

			self.count_answered_question()
			self.base_message_dialog('info', 'save_preseed', self.settings.PRESEED_FILE)
			self.get_value_from_preseed_file()
			self.statusbar.remove_all(self.statusbar_context_1)

	def count_answered_question(self):
		all_counter = 0
		update_counter = 0
		new_counter = 0
		delete_counter = 0
		levelbar = 0

		for one_dict in preseed_questions_identifier:
			all_counter +=1
			if one_dict['answer'] != None:
				levelbar +=1

			if one_dict['question'] in self.value_dict.keys():
				if one_dict['answer'] == None:
					delete_counter +=1

				elif one_dict['answer'] != self.value_dict.get(one_dict['question']):
					update_counter +=1
#					print(one_dict['question'], self.value_dict.get(one_dict['question']))
#					print("1> "+one_dict['answer'])
#					print("2> "+self.value_dict.get(one_dict['question']))
#					break
			elif one_dict['question'] not in self.value_dict.keys():
				if one_dict['answer'] != None:
					new_counter +=1
			else:
#				nevar break
				break
		unsaved = f'{new_counter + update_counter} field unsaved '
		changed = f'{update_counter} field changed '
		deleted = f'{delete_counter} field deleted '
		context = ''
		if new_counter > 0:
			if new_counter  >= 2:
				unsaved = unsaved.replace('field', 'fields')
			context += unsaved
		if update_counter > 0:
			if new_counter >= 2:
				changed = changed.replace('field', 'fields')
			context += changed
		if delete_counter > 0:
			if new_counter >= 2:
				deleted = deleted.replace('field', 'fields')
			context += deleted

		total = update_counter + new_counter + delete_counter
		if not self.on_load:
			if total > 0:
				self.statusbar.push(self.statusbar_context_1,  context)
			else:
				self.statusbar.remove_all(self.statusbar_context_1)

		max_value = 0
		for widget in self.question_to_own_widget_object_dict.values():
			widget_type_name = GObject.type_name(widget).replace('Gtk', "").lower()
			if not widget_type_name in ('liststore', 'treeview'):
				if widget.get_sensitive():
					max_value += 1
			elif widget_type_name in ('liststore', 'treeview'):
				max_value += 1

		self.levelbar.set_value(levelbar)
		self.levelbar.set_max_value(max_value)

		if levelbar == 0:
			return levelbar
		else:
			return total





